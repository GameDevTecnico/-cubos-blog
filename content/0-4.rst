0.4 is out! 
###########

:date: 2024-10-20 00:00:00
:category: Release
:summary: Cubos 0.4 Release!

.. role:: dim
    :class: m-text m-dim

New 0.4 Features
================

This blog post covers the most important changes, but you can check out the full changelog in our `repository <https://github.com/GameDevTecnico/cubos/blob/main/CHANGELOG.md>`_.

On the Editor
-------------

Project Management and Debugging :dim:`(@RiscadoA)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this release, we were finally able to make our editor, **Tesseratos**, a standalone application!
Previously, the editor was a part of the engine itself. If you made changes to the game's code, you had to recompile the editor itself and restart it.
Now, the editor has its own executable, and through it, you can open projects, edit their assets, and even debug them - all without having to restart the editor when recompiling the game.
Right now, the UX is still a bit rough, as we've focused on making it work first.

One major hurdle we had to overcome was how to make the editor aware of the project's data types, such as its components and resources.
Before, they were part of the same application, and thus, the editor could simply access them directly.
Now, with the editor being a separate application, we needed a way to share this information across different processes.
You can read more about it in the "Type Client and Type Server" section at the end of this post, but in short, it is now possible to share type data across different processes, through, for example, a socket.

In practice, this means that games made with Cubos can now be launched with a debug flag which makes them act as a server at a given port.
Then, the editor is able to connect to this server and extract all of the required debug information.
We also make use of this new connection to allow the editor to send debugging commands to the game, such as pausing, resuming, and stepping the game's execution.

So, essentially, we've added two new tools to the editor:

- A debugger tool, which allows you to connect to a running game and debug it (pause, resume, step, etc.).
- A project manager tool, which allows you to open projects, edit their assets, and launch them.

You can see them in action in the video below:

.. raw:: html

    <iframe width="560" height="340" style="display: block; margin: auto" src="https://www.youtube.com/embed/Pu40BjmmW2U" title="" frameBorder="0"   allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"  allowFullScreen></iframe>

Voxel Model Importing Tool :dim:`(@Scarface1809)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO

On the Engine
-------------

Physics with Rotation :dim:`(@fallenatlas)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO

Cascading Shadow Maps :dim:`(@tomas7770)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO
also, here is how you can use the image comparison thing:

.. role:: dim
    :class: m-text m-dim

.. image-comparison::
    :before: {static}/images/brand_guidelines_1.png
    :after: {static}/images/brand_guidelines_2.png

.. image-comparison::
    :class: with-shadows
    :before: {static}/images/brand_guidelines_1.png
    :after: {static}/images/brand_guidelines_2.png

.. image-comparison::
    :class: with-dark-divider
    :before: {static}/images/brand_guidelines_1.png
    :after: {static}/images/brand_guidelines_2.png

Input Axis Deadzones :dim:`(@kuukitenshi)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO

Ortographic Cameras :dim:`(@mkuritsu)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO

On the Core
-------------

Spans for Profiling and Tracing :dim:`(@roby2014)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO

Swapping OpenAL for Miniaudio :dim:`(@diogomsmiranda, @Dageus)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO

Type Client and Type Server :dim:`(@RiscadoA)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To separate **Tesseratos** from the engine into a separate process, we needed a way to share type data across different processes.
This is because the editor needs to know about the project's data types, such as its components and resources, to be able to work with them, for example, to show them in the editor's UI, or to edit scene assets.

To solve this problem, we've added the ``TypeServer`` and ``TypeClient`` classes to the core's reflection module.
The editor contains a ``TypeClient``, the game contains a ``TypeServer`` and both communicate through an abstract stream, which currently is implemented using a TCP socket.

Our reflection system is based on the concept of "traits". A trait is a piece of metadata that describes a type, such as its name, its fields, and its methods.
Both the ``TypeClient`` and the ``TypeServer`` allow registering serialization and deserialization functions for each trait, so that they can be sent across the stream.

The protocol itself is relatively simple:

#. The client sends a list of the names of the traits it supports.
#. The client sends a list of the types it already knows about (for example, primitive types like ``int`` and ``float``).
#. The server sends a list with the types that the client doesn't know about yet. This includes:

   - The type name.
   - A list of the serialized traits that describe the type.
   - The serialized default value for the type, if it has one.

Most of the complexity of this system is on the client side, as it needs to figure out the memory layout of the types it receives from the server.
We do this by basing the memory layout on one of the received traits.
For example, if the server sends a trait that describes an object type with fields, then the client will create a new type which stores these fields in memory.
If the trait describes an array type, then the client will create a new type that stores an array in memory, and so on.

One major limitation of the current implementation is that it lacks support for traits like ``NullableTrait``.
This trait contains a function which determines if a value is null or not, and another to make a value null.
How can we pass a function through a stream? We can't. One thing we could do would be to communicate again with the server whenever the client needs to know whether a value is null or not.
For now, we've decided to simply ignore these traits, but we'll eventually need to tackle this issue, as it would allow for better UX in the editor.

Stacktraces on Crashes :dim:`(@RiscadoA)`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO

Next Steps
==========

In the next release, which should be out by the end of November, we're planning to work on the following features:

* Make it possible to edit scenes through the now standalone editor.
* An Audio plugin, using the new Audio Context abstraction we've added in this release.
* ?? TODO: add graphics plans here
* ?? TODO: add physics plans here
* ?? TODO: add other stuff here

Additionally, we're planning to work on a new game project using our engine - now with online multiplayer support!

You can check out the full list of stuff we want to get done in the `milestone <https://github.com/GameDevTecnico/cubos/milestone/28>`_ for the next release.
